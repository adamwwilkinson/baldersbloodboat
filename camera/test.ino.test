#include <TFT_eSPI.h>
#include <WiFi.h>
#include <esp_now.h>

#define PSD 38 // Pin for the psd

TFT_eSPI tft = TFT_eSPI(135, 240);

typedef struct struct_message {
  int a;
} struct_message;

uint8_t broadcast_address[] = {0xC8, 0xC9, 0xA3, 0xFC, 0x84, 0xF0};
esp_now_peer_info_t peer_info;

void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success"
                                                : "Delivery Fail");
}

void setup() {
  // Serial port for debugging purposes
  Serial.begin(115200);

  pinMode(PSD, OUTPUT);

  tft.init();
  tft.setRotation(1);
  tft.fillScreen(TFT_BLACK);
  tft.setTextColor(TFT_WHITE, TFT_BLUE);
  tft.setTextSize(2);

  // Connect to Wi-Fi
  WiFi.mode(WIFI_STA);

  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  esp_now_register_send_cb(OnDataSent);

  // Register peer
  memcpy(peer_info.peer_addr, broadcast_address, 6);
  peer_info.channel = 0;
  peer_info.encrypt = false;

  // Add peer
  if (esp_now_add_peer(&peer_info) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }

  // Print ESP Local IP Address
  Serial.println(WiFi.macAddress());
}

void loop() {
  int psd_value = analogRead(PSD);
  Serial.println(String(psd_value));
  struct_message data = {psd_value};
  esp_err_t result =
      esp_now_send(broadcast_address, (uint8_t *)&data, sizeof(data));
  if (result == ESP_OK) {
    Serial.println("Sent with success");
  } else {
    Serial.println("Error sending the data");
  }
}